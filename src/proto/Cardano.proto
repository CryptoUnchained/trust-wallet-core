syntax = "proto3";

package TW.Cardano.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

message OutPoint {
    bytes tx_hash = 1;
    uint64 output_index = 2;
}

message TokenAmount {
    string policy_id = 1; // as hex string (28x2 digits)
    string asset_name = 2;
    bytes amount = 3; // 256-bit number
}

message TxInput {
    OutPoint out_point = 1;

    string address = 2;

    // ADA amount
    uint64 amount = 3;

    // optional token amounts
    repeated TokenAmount token_amount = 4;
}

message TxOutput {
    string address = 1;
    
    // ADA amount
    uint64 amount = 2;

    // optional token amounts
    repeated TokenAmount token_amount = 3;
}

message Transfer {
    // Destination address as string
    string to_address = 1;

    // Change address
    string change_address = 2;

    // ADA amount to transfer
    uint64 amount = 3;

    // Set if max amount is requested (max possible from UTXOs/fee; amount is disregarded in this case)
    bool use_max_amount = 4;

    // Optional token(s) to be transferred
    repeated TokenAmount token_amount = 5;
}

message TransactionPlan {
    // total coins in the utxos
    uint64 available_amount = 1;

    // coins in the output UTXO
    uint64 amount = 2;

    // coin amount deducted as fee
    uint64 fee = 3;

    // coins in the change UTXO
    uint64 change = 4;

    // total tokens in the utxos (optional)
    repeated TokenAmount available_tokens = 5;

    // tokens in the output (optional)
    repeated TokenAmount output_tokens = 6;

    // tokens in the change (optional)
    repeated TokenAmount change_tokens = 7;

    repeated TxInput utxos = 8;
    
    Common.Proto.SigningError error = 9;
}

// Input data necessary to create a signed transaction
message SigningInput {
    repeated TxInput utxos = 1;

    // Available private keys (double extended keys); every input UTXO adress should be covered
    // In case of Plan only, keys should be present, in correct number
    repeated bytes private_key = 2;

    // Later this can be made oneof if more message types are supported
    Transfer transfer_message = 3;

    uint64 ttl = 4;

    // Optional plan
    TransactionPlan plan = 5;
}

// Transaction signing output
message SigningOutput {
    bytes encoded = 1;

    // TxID, derived from transaction data, also needed for submission
    bytes tx_id = 2;

    // Optional error
    Common.Proto.SigningError error = 3;
}
